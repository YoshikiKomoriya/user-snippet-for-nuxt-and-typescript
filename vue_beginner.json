{
	"Template with Nuxt.js + TypeScript(beginner)": {
		"prefix": ["vue", "<template>"],
		"body": [
			"<template>",
			"\t<div>",
			"\t\t<div v-bind:class=\"\\$style.test\">{{ testData }}</div>",
			"\t\t<div :class=\"\\$style.test\">{{ computedExample }}</div>",
			"\t\t<div :class=\"[\\$style.test, \\$style.test2]\">{{ exampleMethod }}</div>",
			"\t</div>",
			"</template>",
			"",
			"<script lang=\"ts\">",
			"import Vue from 'vue'",
			"",
			"import TestComponent from '~/components/TestComponent.vue'",
			"import TestDirective from '~/components/directive/test.vue'",
			"import TestFilter from '~/components/filter/test.vue'",
			"import TestMixin from '~/components/mixin/test.vue'",
			"",
			"export default Vue.extend({",
			"\t/**",
			"\t * コンポーネントの読み込み",
			"\t * 特定のコンポーネントを登録する（利用可能にする）際に記入する",
			"\t * @see https://jp.vuejs.org/v2/guide/components-registration.html",
			"\t */",
			"\tcomponents: {",
			"\t\tTestComponent",
			"\t},",
			"",
			"\t/**",
			"\t * カスタムディレクティブの読み込み",
			"\t * データの変更をフックにして、特定の処理を行うことができる",
			"\t * @see https://jp.vuejs.org/v2/guide/custom-directive.html",
			"\t */",
			"\tdirectives: {",
			"\t\tTestDirective",
			"\t},",
			"",
			"\t/**",
			"\t * フィルターの読み込み",
			"\t * 値を表示する際に、フォーマットを適用する",
			"\t * @see https://jp.vuejs.org/v2/guide/filters.html",
			"\t */",
			"\tfilters: {",
			"\t\tTestFilter",
			"\t},",
			"",
			"\t/**",
			"\t * ミックスインの読み込み",
			"\t * 共通の処理などを読み込む",
			"\t * @see https://jp.vuejs.org/v2/guide/mixins.html",
			"\t */",
			"\tmixins: [",
			"\t\tTestMixin",
			"\t],",
			"",
			"\t/**",
			"\t * データの設定",
			"\t */",
			"\tdata: () => ({",
			"\t\ttestData: 'testData'",
			"\t}),",
			"",
			"\t/**",
			"\t * ライフサイクルフック",
			"\t * インスタンスの作成前・データの変更後など、インスタンスの生成〜破棄までの様々な段階（ライフサイクル）で、特定の処理を行うことができる ",
			"\t * 数が多いため、いくつかの例のみ記載する",
			"\t * @see https://jp.vuejs.org/v2/guide/instance.html#%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB%E3%83%95%E3%83%83%E3%82%AF",
			"\t * @see https://jp.vuejs.org/v2/api/#%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3-%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB%E3%83%95%E3%83%83%E3%82%AF",
			"\t */",
			"\t/**",
			"\t * インスタンスがマウントされた後に呼び出される処理",
			"\t * @see https://jp.vuejs.org/v2/api/#mounted",
			"\t */",
			"\tmounted() {",
			"\t\tconsole.log('mounted')",
			"\t},",
			"",
			"\t/**",
			"\t * インスタンスが破棄される直前に呼び出される処理",
			"\t * @see https://jp.vuejs.org/v2/api/#beforeDestroy",
			"\t */",
			"\tbeforeDestroy() {",
			"\t\tconsole.log('beforeDestroy')",
			"\t},",
			"",
			"\t/**",
			"\t * プロップの設定",
			"\t * 親子コンポーネントからデータを受け取る際に使う",
			"\t * 関数の引数のような概念である",
			"\t * @see https://jp.vuejs.org/v2/api/#props",
			"\t */",
			"\tprops: {",
			"\t\texampleProp: {",
			"\t\t\ttype: String,",
			"\t\t\trequired: true,",
			"\t\t\tdefault: 'test'",
			"\t\t}",
			"\t},",
			"",
			"\t/**",
			"\t * 算出プロパティの設定",
			"\t * ",
			"\t * @see https://jp.vuejs.org/v2/api/#computed",
			"\t */",
			"\t/**",
			"\t * 算出プロパティとメソッド",
			"\t * DOM上に出力する場合、どちらも似たような性質を持つが、主に以下の点で異なる",
			"\t * - キャッシュの有無（算出プロパティはキャッシュを行う。リアクティブな依存関係に基づいて、関連する値が更新された時だけ処理を実行する）",
			"\t * @see https://jp.vuejs.org/v2/guide/computed.html#%E7%AE%97%E5%87%BA%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3-vs-%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89",
			"\t */",
			"\tcomputed: {",
			"\t\tcomputedExample() {",
			"\t\t\tconst test = 1 + 1",
			"\t\t\treturn test",
			"\t\t},",
			"\t\tcomputedStoreExample() {",
			"\t\t return this.\\$accessor.store.get() ",
			"\t\t}",
			"\t},",
			"",
			"\t/**",
			"\t * 関数の設定",
			"\t * @see https://jp.vuejs.org/v2/api/#methods",
			"\t */",
			"\tmethods: {",
			"\t\texampleMethod() {",
			"\t\t\tconst test = 'test'",
			"\t\t\treturn test;",
			"\t\t}",
			"\t},",
			"",
			"\t/**",
			"\t * 特定の値を監視して、コールバックを適用する",
			"\t * @see https://jp.vuejs.org/v2/api/#watch",
			"\t */",
			"\twatch: {",
			"\t\ttestData: (value, oldValue) => {",
			"\t\t\tconsole.log('testData is changed.')",
			"\t\t}",
			"\t}",
			"})",
			"</script>",
			"",
			"<style module lang=\"scss\">",
			"/**",
			"CSS modules",
			"CSSに名前空間を追加して、競合を防ぐ仕組み",
			"スタイルを適用したい場合、`v-bind:cass`を用いてクラスを付与する必要がある",
			"要素・属性を指定するセレクタは適用外である（グローバルのCSSとして適用されてしまう）ため、なるべくクラスセレクタを用いることが望ましい",
			"@see https://qiita.com/mascii/items/1d43f5e5529d3beb433b#%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF%E4%BB%A5%E5%A4%96%E3%81%AE%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF%E3%81%AE%E5%88%A9%E7%94%A8",
			" */",
			".test {",
			"\tbackground-color: red;",
			"}",
			".test2 {",
			"\tbackground-color: blue;",
			"}",
			"</style>",
			""
		],
		"description": "Nuxt.js + TypeScript向けテンプレート（初心者向け）"
	}
}